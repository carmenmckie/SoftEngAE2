import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.stream.Collectors;

//Controller as part of the MVC design architecture: 
//Controller is is implemented to handle Events generated by the user in View
// (when the user interacts with the GUI) 
public class Controller implements ActionListener {
	private View view; 
	private Model model; 
	public static final int CLOSE_PROGRAM = 0; 
	
	public Controller(View view, Model model) {
		this.view = view; 
		this.model = model; 
	} 
	
	public void actionPerformed(ActionEvent e) {
		if (e.getSource() == view.getButton2()) {
			// Save to file with the data (which is updated throughout the program): 
			FileIO.saveFile(model.getSearchEngine().getCourseList(), model.getSearchEngine().getTeacherList());
			// Close the program using System.exit(0): 
			// (Constant for 0 used to meet good design requirements): 
			System.exit(CLOSE_PROGRAM);		
			}
		if (e.getSource() == view.getButtonOne()) {
			// set courseInfo to be populated by the data from the .txt file: 
			model.setCourseInfo(model.getFileHandler().uploadFile());
			// Creates DataHandling object so data from file can be read: 
			DataHandling dh = new DataHandling(model.getCourseList(), model.getTeacherList(), model.getCourseInfo());
			// the DataHandling object will populate the empty lists ('courses' and 'teachers')
			// with the data input by the user, as requested by the AE2: 
			dh.dataHandler(); 
			String listString = model.getCourseInfo().stream().map(Object::toString)
					.collect(Collectors.joining("," + "\n"));
			// textArea1 is set to be the data input by the user from the .txt file: 
			view.getTextArea1().setText(listString);
			view.getTextArea2().setText("");
			// After the Class Director has input their file, switch to the Administrator view: 
			view.getCardLayout().show(view.getFrame().getContentPane(),"two");
		}
		if (e.getSource() == view.getAddSkillToTeacherField()) {
			String data = view.getAddSkillToTeacherField().getText();
			// Pass to Search Engine's method to add a particular skill to a Teacher: 
			model.getSearchEngine().addSkillToTeacher(data);
			// Update the JTextArea so that the user knows their request was processed: 
			view.getAddSkillToTeacherField().setText("Processed");
			// ArrayList to String, so it can be printed in the JTextField (as a JTextField
			// requires a String as a parameter): 
			String str = Model.iterableToString(model.getSearchEngine().getTeacherList());
			// set textArea2 with the updated data: 
			view.getTextArea2().setText(str);
		}
		// Used when the user aims to add a Teacher to a Lab: 
		if (e.getSource() == view.getAddTeacherToLabEntry()) {
			// fetch the data input by the user: 
			String data = view.getAddTeacherToLabEntry().getText();	
			// pass it to the search engine so that that particular teacher can 
			// be added to the lab: 
			model.getSearchEngine().addTeacherToLab(data);
			// update the output so the user knows their request was processed: 
			view.getAddTeacherToLabEntry().setText("Processed");
			String str = Model.iterableToString(model.getSearchEngine().getCourseList());
			// display the updated data: 
			view.getTextArea2().setText(str);
			}
		// Used when the user checks how many teachers are still required per lab: 
		if (e.getSource() == view.getCheckLabRequirementsEntry()) {
			// fetch the data input by the user: 
			String data = view.getCheckLabRequirementsEntry().getText(); 
			// call .findTeachersNeededPerLab() to extract the number of teachers still required: 
			int temp = model.getSearchEngine().findTeachersNeededPerLab(data);
			String str = "This lab currently needs " + temp + " teachers.";
			// update the output for the user: 
			view.getCheckLabRequirementsEntry().setText(str);
		}
		// called when the user wants to search what teachers have a particular skill: 
		if (e.getSource() == view.getUserEntersSkill()) {
			// fetch the data the user input: 
			String data = view.getUserEntersSkill().getText();
			// use .findTeacher() from the SearchEngine class to find the result: 
			ArrayList<Teacher> teachersWithSkill = model.getSearchEngine().findTeacher(data); 
			// The number of teachers with this skill: 
			int counter1 = teachersWithSkill.size(); 
			// Teachers WITH this skill displayed in the output: 
			view.getTeachersWithTheseSkillsResult().setText("There are " + counter1 + " teacher(s) with this skill: \n\n" + Model.iterableToString(teachersWithSkill));
			// Clear the search box so another search can occur: 
			view.getUserEntersSkill().setText("");
			// Teachers without this skill: 
			ArrayList<Teacher> teachersWithoutSkill = model.getSearchEngine().findTeachersToTrain(data);
			// The number of teachers without this skill: 
			int counter2 = teachersWithoutSkill.size();
			// Teachers WITHOUT this skill displayed in the output: 
			view.getTeachersWithoutTheseSkillsResult().setText("There are " + counter2 + " teacher(s) without this skill: \n\n" + Model.iterableToString(teachersWithoutSkill));
			
		}
	}
}

	
